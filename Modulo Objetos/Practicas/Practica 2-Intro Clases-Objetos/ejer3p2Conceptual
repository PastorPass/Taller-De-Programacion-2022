Ejer3p2

Ejercicio Conceptual 


3- Responda: ¿Qué imprimen los siguientes programas? ¿Qué efecto tiene la asignación
utilizada con objetos? ¿Qué efecto tiene la comparación con == y != utilizada con objetos?
¿Qué retorna el mensaje equals cuando se le envía a un String? 

public class Ej03QueImprimeA {
 public static void main(String[] args) {
 String saludo1=new String("hola");
 String saludo2=new String("hola");
 System.out.println(saludo1 == saludo2);  //False
 System.out.println(saludo1 != saludo2);   //True
 System.out.println(saludo1.equals(saludo2)); //True
}
}


public class Ej03QueImprimeB {
 public static void main(String[] args) {
 Persona p1;
 Persona p2;
 p1 = new Persona();
 p1.setNombre("Pablo Sotile");
 p1.setDNI(11200413);
 p1.setEdad(40);
 p2 = new Persona();
 p2.setNombre("Julio Toledo");
 p2.setDNI(22433516);
 p2.setEdad(51);
 p1 = p2;
 p1.setEdad( p1.getEdad() + 1 );
 System.out.println(p2.toString());  //Mi nombre es julio toledo, mi dni es 22433516 y tengo 52 años
 System.out.println(p1.toString());  //Mi nombre es julio toledo, mi dni es 22433516 y tengo 52 años
 System.out.println( (p1 == p2) ); //TRUE
 }
}

¿Qué efecto tiene la asignación
utilizada con objetos? 
Rta :
 hay que tener en cuenta que para establecer asignaciones de este tipo entre objetos debe haber coincidencia de tipos.

Es decir, tratar de establecer estudiante478 = deposito3; nos llevará a un mensaje de error del compilador de tipo “Incompatible types – found Deposito but expected Estudiante”.

Consideremos que hubiéramos definido un tipo Estudiante y que hemos creado tres objetos referenciados por las variables: estudiante7, estudiante381 , estudiante45.

Ahora supongamos que establecemos: estudiante381 = estudiante45. El significado de esta instrucción es que la variable apuntadora de estudiante381 se convierte en idéntica a la variable apuntadora estudiante45. Es decir, ahora ambas variables referencian al mismo objeto

 dos variables tienen la misma información (apuntan al mismo objeto) y un objeto ha dejado de estar apuntado, se ha quedado “flotando”. ¿Cómo podemos acceder a ese objeto? La respuesta es que ya no podemos acceder. Este tipo de situaciones en principio no son deseables, ya que supone dejar “información” a la que no podemos acceder y esto no puede considerarse adecuado o razonable. Al hacer una asignación como estudiante381 = estudiante45 lo que hacemos es tener dos variables referenciadoras con la misma información, lo que nos lleva a que solo podamos acceder a un único objeto. Después de hecha la asignación ambas variables nos referencian al mismo objeto, podríamos decir que son redundantes: dos nombres para la misma cosa. Dos variables que apuntan al mismo objeto se dice que son “alias” de ese objeto.


¿Qué efecto tiene la comparación con == y != utilizada con objetos?

 Esta pregunta en Java se traduce así: ¿Es el objeto al que apunta p1 igual al objeto al que apunta p2? Es decir, ¿son el mismo objeto los objetos apuntados por p1 y p2, y por tanto existe una relación de identidad entre ambos? La respuesta es que no, no son el mismo objeto, pues cada vez que usamos el constructor, cada vez que usamos new, creamos un nuevo objeto. Seguramente no queríamos preguntarnos si las variables apuntadoras apuntaban al mismo objeto, sino si los objetos eran “iguales”. Ahora bien, la igualdad entre tipos primitivos sí es evaluable con relativa facilidad porque no distinguimos entre identidad e igualdad, en tipos primitivos ambas cosas podemos decir que son lo mismo: p.ej. ¿Es 32 == 21 ó el carácter ‘f’ ==’F’? Obviamente no. Pero la igualdad entre objetos en Java se basa en que exista una definición previa de cuál es el criterio de igualdad
 y esta definición es la que dé el método equals aplicable al objeto (todo objeto en principio tendrá un método equals). ¿Qué ocurre si hacemos p1 = p2? En este caso un objeto deja de estar apuntado por variable alguna. Las dos variables pasan a apuntar al mismo objeto y por tanto p1 == p2 devuelve true.

¿Qué retorna el mensaje equals cuando se le envía a un String? 

Recordar que los String, Integer, etc. son objetos y que por tanto no se pueden comparar usando ==. Consideremos este caso:

Persona p1 = new Persona(“Andrés Hernández Suárez”, 32, “54221893-D”, “Economista);

Persona p2 = new Persona(“Andrés Hernández Suárez”, 32, “54221893-D”, “Abogado”);

 

¿Cómo establecemos si dos personas son iguales? El concepto de igualdad entre objetos, en Java, tiene que ser definido para que el compilador sepa a qué atenerse si se comparan dos objetos, en este caso a dos personas. La comparación usará la sintaxis:

 if (objeto1.equals(objeto2)) { Instrucciones si se cumple el criterio de igualdad….. } else { Instrucciones si no se cumple el criterio de igualdad }


Por defecto, Java permite el uso del método equals para todo objeto, pero el criterio por defecto de Java no nos va a ser útil para clases creadas por nosotros: tendremos que definir nuestro criterio de igualdad dentro de nuestra clase.
